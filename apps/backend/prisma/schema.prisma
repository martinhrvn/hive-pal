// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Apiary {
  id        String  @id @default(uuid())
  name      String
  location  String?
  latitude  Float?
  longitude Float?
  notes     String?
  hives     Hive[]
}

model Hive {
  id               String       @id @default(uuid())
  name             String
  apiaryId         String
  apiary           Apiary       @relation(fields: [apiaryId], references: [id])
  status           HiveStatus   @default(ACTIVE)
  installationDate DateTime?
  queens           Queen[]
  boxes            Box[]
  inspections      Inspection[]
}

model Box {
  id          String  @id @default(uuid())
  hiveId      String
  hive        Hive    @relation(fields: [hiveId], references: [id])
  position    Int // Position from bottom up
  frameCount  Int // Number of frames in this box
  hasExcluder Boolean @default(false) // Whether there's a queen excluder above this box
  type        BoxType // BROOD, HONEY, etc.
}

model Queen {
  id           String      @id @default(uuid())
  hiveId       String
  hive         Hive        @relation(fields: [hiveId], references: [id])
  markingColor String?
  year         Int?
  source       String?
  status       QueenStatus // ACTIVE, REPLACED, DEAD, UNKNOWN
  installedAt  DateTime
  replacedAt   DateTime?
}

model Inspection {
  id                String        @id @default(uuid())
  hiveId            String
  hive              Hive          @relation(fields: [hiveId], references: [id])
  date              DateTime
  weatherConditions String?
  observations      Observation[]
  actions           Action[]
}

model Observation {
  id           String     @id @default(uuid())
  inspectionId String
  inspection   Inspection @relation(fields: [inspectionId], references: [id])
  type         String // BROOD_PATTERN, QUEEN_SEEN, DISEASE_SIGNS etc.
  numericValue Float? // For numerical observations
  textValue    String? // For text-based observations
  notes        String? // Additional notes about the observation
}

model Action {
  id           String     @id @default(uuid())
  inspectionId String
  inspection   Inspection @relation(fields: [inspectionId], references: [id])
  type         String // FEEDING, TREATMENT etc.
  notes        String? // Description of the action taken
}

enum HiveStatus {
  ACTIVE
  INACTIVE
  DEAD
  SOLD
  UNKNOWN
}

enum QueenStatus {
  ACTIVE
  REPLACED
  DEAD
  UNKNOWN
}

enum BoxType {
  BROOD // Brood box
  HONEY // Honey super
  FEEDER // Feeder box
}
