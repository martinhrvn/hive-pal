// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Apiary {
  id        String   @id @default(uuid())
  name      String
  location  String?
  latitude  Float?
  longitude Float?
  notes     String?
  hives     Hive[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("apiaries")
}

model Hive {
  id               String       @id @default(uuid())
  name             String
  apiaryId         String       @map("apiary_id")
  apiary           Apiary       @relation(fields: [apiaryId], references: [id])
  status           HiveStatus   @default(ACTIVE)
  installationDate DateTime?    @map("installation_date")
  notes            String?
  queens           Queen[]
  inspections      Inspection[]
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")

  @@map("hives")
}

model Queen {
  id           String      @id @default(uuid())
  hiveId       String      @map("hive_id")
  hive         Hive        @relation(fields: [hiveId], references: [id])
  markingColor String?     @map("marking_color")
  year         Int?
  source       String?
  status       QueenStatus @default(ACTIVE)
  installedAt  DateTime    @map("installed_at")
  replacedAt   DateTime?   @map("replaced_at")
  notes        String?
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@map("queens")
}

model Inspection {
  id                String        @id @default(uuid())
  hiveId            String        @map("hive_id")
  hive              Hive          @relation(fields: [hiveId], references: [id])
  date              DateTime
  weatherConditions String?       @map("weather_conditions")
  notes             String?
  observations      Observation[]
  actions           Action[]
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  @@map("inspections")
}

model Observation {
  id           String     @id @default(uuid())
  inspectionId String     @map("inspection_id")
  inspection   Inspection @relation(fields: [inspectionId], references: [id])
  type         String
  value        Json
  createdAt    DateTime   @default(now()) @map("created_at")

  @@map("observations")
}

model Action {
  id           String     @id @default(uuid())
  inspectionId String     @map("inspection_id")
  inspection   Inspection @relation(fields: [inspectionId], references: [id])
  type         String
  value        Json
  createdAt    DateTime   @default(now()) @map("created_at")

  @@map("actions")
}

enum HiveStatus {
  ACTIVE
  INACTIVE
  DEAD
  SOLD
}

enum QueenStatus {
  ACTIVE
  REPLACED
  DEAD
  UNKNOWN
}
