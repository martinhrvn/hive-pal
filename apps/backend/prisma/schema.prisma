generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String   @id @default(uuid())
  email                  String   @unique
  password               String
  name                   String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  apiaries               Apiary[]
  role                   Role     @default(USER)
  passwordChangeRequired Boolean  @default(false)
}

enum Role {
  USER
  ADMIN
}

model Apiary {
  id        String  @id @default(uuid())
  name      String
  location  String?
  latitude  Float?
  longitude Float?
  notes     String?
  hives     Hive[]
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  // Create index for quick lookup by userId - used in authorization checks
  @@index([userId])
}

model Hive {
  id               String       @id @default(uuid())
  name             String
  notes            String?
  apiaryId         String?
  apiary           Apiary?      @relation(fields: [apiaryId], references: [id])
  status           HiveStatus   @default(ACTIVE)
  installationDate DateTime?
  queens           Queen[]
  boxes            Box[]
  inspections      Inspection[]

  // Create index for quick lookup by apiaryId - used in authorization checks
  @@index([apiaryId])
}

model Box {
  id            String  @id @default(uuid())
  hiveId        String
  hive          Hive    @relation(fields: [hiveId], references: [id])
  position      Int // Position from bottom up
  frameCount    Int // Number of frames in this box
  maxFrameCount Int     @default(10) // Maximum number of frames the box can hold
  hasExcluder   Boolean @default(false) // Whether there's a queen excluder above this box
  type          BoxType // BROOD, HONEY, etc.

  @@index([hiveId])
  @@index([hiveId, position]) // For looking up boxes by position in a hive
}

model Queen {
  id          String      @id @default(uuid())
  hiveId      String?
  hive        Hive?       @relation(fields: [hiveId], references: [id])
  marking     String?
  color       String?
  year        Int?
  source      String?
  status      QueenStatus @default(ACTIVE)
  installedAt DateTime?
  replacedAt  DateTime?

  // Create index for quick lookup by hiveId - used in authorization checks
  @@index([hiveId])
}

model Inspection {
  id                String           @id @default(uuid())
  hiveId            String
  hive              Hive             @relation(fields: [hiveId], references: [id])
  date              DateTime
  notes             InspectionNote[]
  temperature       Float?
  weatherConditions String?
  observations      Observation[]
  actions           Action[]
  status            InspectionStatus @default(COMPLETED)

  // Create index for quick lookup by hiveId - used in authorization checks
  @@index([hiveId])
  // Create index for date-based queries
  @@index([date])
}

enum InspectionStatus {
  SCHEDULED
  OVERDUE
  COMPLETED
  CANCELLED
}

model InspectionNote {
  id           String     @id @default(uuid())
  inspectionId String
  inspection   Inspection @relation(fields: [inspectionId], references: [id])
  text         String

  @@index([inspectionId])
}

model Observation {
  id           String     @id @default(uuid())
  inspectionId String
  inspection   Inspection @relation(fields: [inspectionId], references: [id])
  type         String // BROOD_PATTERN, QUEEN_SEEN, DISEASE_SIGNS etc.
  numericValue Float? // For numerical observations
  textValue    String? // For text-based observations
  booleanValue Boolean? // For boolean observations
  notes        String? // Additional notes about the observation

  @@index([inspectionId])
  @@index([type, inspectionId]) // For looking up specific observation types
}

model Action {
  id           String     @id @default(uuid())
  inspectionId String
  inspection   Inspection @relation(fields: [inspectionId], references: [id])
  type         ActionType // FEEDING, TREATMENT etc.
  notes        String? // Description of the action taken

  feedingAction   FeedingAction?
  treatmentAction TreatmentAction?
  frameAction     FrameAction?

  @@index([inspectionId])
  @@index([type, inspectionId]) // For looking up specific action types
}

model FeedingAction {
  id            String  @id @default(uuid())
  actionId      String  @unique
  action        Action  @relation(fields: [actionId], references: [id], onDelete: Cascade)
  feedType      String // Sugar Syrup, Honey, Pollen Sub, Candy
  amount        Float // Numeric amount
  unit          String // liters, quarts, gallons, kg, lb
  concentration String? // 1:1, 2:1, etc.
}

// Treatment-specific details
model TreatmentAction {
  id       String  @id @default(uuid())
  actionId String  @unique
  action   Action  @relation(fields: [actionId], references: [id], onDelete: Cascade)
  product  String // Apivar, Formic Pro, etc.
  quantity Float // Numeric quantity
  unit     String // strips, pads, grams, ml
  duration String? // 7 days, 14 days, etc.
}

// Frame-specific details
model FrameAction {
  id       String @id @default(uuid())
  actionId String @unique
  action   Action @relation(fields: [actionId], references: [id], onDelete: Cascade)
  quantity Int // number added/removed (positive = added, negative = removed)
}

enum HiveStatus {
  ACTIVE
  INACTIVE
  DEAD
  SOLD
  UNKNOWN
  ARCHIVED
}

enum QueenStatus {
  ACTIVE
  REPLACED
  DEAD
  UNKNOWN
}

enum BoxType {
  BROOD // Brood box
  HONEY // Honey super
  FEEDER // Feeder box
}

enum ActionType {
  FEEDING
  TREATMENT
  FRAME
  OTHER
}
