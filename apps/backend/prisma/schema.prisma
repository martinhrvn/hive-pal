generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                 @id @default(uuid())
  email                  String                 @unique
  password               String
  name                   String?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  apiaries               Apiary[]
  role                   Role                   @default(USER)
  passwordChangeRequired Boolean                @default(false)
  equipmentItems         EquipmentItem[]
  equipmentMultiplier    EquipmentMultiplier?
}

enum Role {
  USER
  ADMIN
}

model Apiary {
  id               String            @id @default(uuid())
  name             String
  location         String?
  latitude         Float?
  longitude        Float?
  notes            String?
  hives                 Hive[]
  harvests              Harvest[]
  user                  User                    @relation(fields: [userId], references: [id])
  userId                String
  weather               Weather[]
  weatherHourlyForecasts WeatherHourlyForecast[]
  weatherForecasts      WeatherForecast[]

  // Create index for quick lookup by userId - used in authorization checks
  @@index([userId])
}

model Hive {
  id               String       @id @default(uuid())
  name             String
  notes            String?
  apiaryId         String?
  apiary           Apiary?      @relation(fields: [apiaryId], references: [id])
  status           HiveStatus   @default(ACTIVE)
  installationDate DateTime?
  positionRow      Int?         // Row position in apiary layout (0-based)
  positionCol      Int?         // Column position within row (0-based)
  settings         Json?        // JSON field for hive-specific settings (feeding, inspection frequency, etc.)
  queens           Queen[]
  boxes            Box[]
  inspections      Inspection[]
  actions          Action[]
  harvestHives     HarvestHive[]
  alerts           Alert[]

  // Create index for quick lookup by apiaryId - used in authorization checks
  @@index([apiaryId])
  // Create index for position-based queries within an apiary
  @@index([apiaryId, positionRow, positionCol])
}

model Box {
  id            String      @id @default(uuid())
  hiveId        String
  hive          Hive        @relation(fields: [hiveId], references: [id])
  position      Int // Position from bottom up
  frameCount    Int // Number of frames in this box
  maxFrameCount Int         @default(10) // Maximum number of frames the box can hold
  hasExcluder   Boolean     @default(false) // Whether there's a queen excluder above this box
  type          BoxType // BROOD, HONEY, etc.
  variant       BoxVariant? // LANGSTROTH_DEEP, LANGSTROTH_SHALLOW, etc.
  color         String? // Hex color code for visual representation
  lastSanitized DateTime? // When this box position was last replaced with a sanitized box

  @@index([hiveId])
  @@index([hiveId, position]) // For looking up boxes by position in a hive
}

model Queen {
  id          String      @id @default(uuid())
  hiveId      String?
  hive        Hive?       @relation(fields: [hiveId], references: [id])
  marking     String?
  color       String?
  year        Int?
  source      String?
  status      QueenStatus @default(ACTIVE)
  installedAt DateTime?
  replacedAt  DateTime?

  // Create index for quick lookup by hiveId - used in authorization checks
  @@index([hiveId])
}

model Inspection {
  id                String           @id @default(uuid())
  hiveId            String
  hive              Hive             @relation(fields: [hiveId], references: [id])
  date              DateTime
  notes             InspectionNote[]
  temperature       Float?
  weatherConditions String?
  observations      Observation[]
  actions           Action[]
  status            InspectionStatus @default(COMPLETED)

  // Create index for quick lookup by hiveId - used in authorization checks
  @@index([hiveId])
  // Create index for date-based queries
  @@index([date])
}

enum InspectionStatus {
  SCHEDULED
  OVERDUE
  COMPLETED
  CANCELLED
}

model InspectionNote {
  id           String     @id @default(uuid())
  inspectionId String
  inspection   Inspection @relation(fields: [inspectionId], references: [id])
  text         String

  @@index([inspectionId])
}

model Observation {
  id           String     @id @default(uuid())
  inspectionId String
  inspection   Inspection @relation(fields: [inspectionId], references: [id])
  type         String // BROOD_PATTERN, QUEEN_SEEN, DISEASE_SIGNS etc.
  numericValue Float? // For numerical observations
  textValue    String? // For text-based observations
  booleanValue Boolean? // For boolean observations
  notes        String? // Additional notes about the observation

  @@index([inspectionId])
  @@index([type, inspectionId]) // For looking up specific observation types
}

model Action {
  id           String     @id @default(uuid())
  hiveId       String?
  hive         Hive?      @relation(fields: [hiveId], references: [id])
  inspectionId String?
  inspection   Inspection? @relation(fields: [inspectionId], references: [id])
  harvestId    String?    // Link to harvest if action from harvest
  harvest      Harvest?   @relation(fields: [harvestId], references: [id])
  type         ActionType // FEEDING, TREATMENT, HARVEST etc.
  notes        String? // Description of the action taken
  date         DateTime   @default(now()) // Date when action was performed

  feedingAction   FeedingAction?
  treatmentAction TreatmentAction?
  frameAction     FrameAction?
  harvestAction   HarvestAction?
  boxConfigurationAction BoxConfigurationAction?

  @@index([hiveId])
  @@index([inspectionId])
  @@index([harvestId])
  @@index([type, hiveId]) // For looking up specific action types
  @@index([date]) // For date-based queries
}

model FeedingAction {
  id            String  @id @default(uuid())
  actionId      String  @unique
  action        Action  @relation(fields: [actionId], references: [id], onDelete: Cascade)
  feedType      String // Sugar Syrup, Honey, Pollen Sub, Candy
  amount        Float // Numeric amount
  unit          String // liters, quarts, gallons, kg, lb
  concentration String? // 1:1, 2:1, etc.
}

// Treatment-specific details
model TreatmentAction {
  id       String  @id @default(uuid())
  actionId String  @unique
  action   Action  @relation(fields: [actionId], references: [id], onDelete: Cascade)
  product  String // Apivar, Formic Pro, etc.
  quantity Float // Numeric quantity
  unit     String // strips, pads, grams, ml
  duration String? // 7 days, 14 days, etc.
}

// Frame-specific details
model FrameAction {
  id       String @id @default(uuid())
  actionId String @unique
  action   Action @relation(fields: [actionId], references: [id], onDelete: Cascade)
  quantity Int // number added/removed (positive = added, negative = removed)
}

// Harvest-specific details
model HarvestAction {
  id       String @id @default(uuid())
  actionId String @unique
  action   Action @relation(fields: [actionId], references: [id], onDelete: Cascade)
  amount   Float  // kg of honey harvested from this hive
  unit     String @default("kg") // Unit of measurement
}

// Box configuration change details
model BoxConfigurationAction {
  id            String @id @default(uuid())
  actionId      String @unique
  action        Action @relation(fields: [actionId], references: [id], onDelete: Cascade)
  boxesAdded    Int    @default(0) // Number of boxes added
  boxesRemoved  Int    @default(0) // Number of boxes removed
  framesAdded   Int    @default(0) // Total number of frames added
  framesRemoved Int    @default(0) // Total number of frames removed
  totalBoxes    Int    // Total boxes after the change
  totalFrames   Int    // Total frames after the change
}

// Harvest tracking
model Harvest {
  id            String         @id @default(uuid())
  apiaryId      String
  apiary        Apiary         @relation(fields: [apiaryId], references: [id])
  date          DateTime
  status        HarvestStatus  @default(DRAFT)
  totalWeight   Float?         // kg of honey extracted
  notes         String?
  harvestHives  HarvestHive[]
  actions       Action[]       // Actions created when harvest is finalized
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([apiaryId])
  @@index([date])
  @@index([status])
}

model HarvestHive {
  id              String   @id @default(uuid())
  harvestId       String
  harvest         Harvest  @relation(fields: [harvestId], references: [id], onDelete: Cascade)
  hiveId          String
  hive            Hive     @relation(fields: [hiveId], references: [id])
  framesTaken     Int      // Number of frames harvested from this hive
  honeyAmount     Float?   // Calculated kg after weight entry
  honeyPercentage Float?   // Percentage of total harvest

  @@unique([harvestId, hiveId]) // Prevent duplicate hive entries in same harvest
  @@index([harvestId])
  @@index([hiveId])
}

enum HiveStatus {
  ACTIVE
  INACTIVE
  DEAD
  SOLD
  UNKNOWN
  ARCHIVED
}

enum QueenStatus {
  ACTIVE
  REPLACED
  DEAD
  UNKNOWN
}

enum BoxType {
  BROOD // Brood box
  HONEY // Honey super
  FEEDER // Feeder box
}

enum BoxVariant {
  LANGSTROTH_DEEP // Standard Langstroth deep box
  LANGSTROTH_SHALLOW // Standard Langstroth shallow/medium box
  B_DEEP // B-hive deep box
  B_SHALLOW // B-hive shallow box
  DADANT // Dadant box
  NATIONAL_DEEP // British National deep
  NATIONAL_SHALLOW // British National shallow
  WARRE // Warr√© hive box
  TOP_BAR // Top bar hive
  CUSTOM // Custom size
}

enum ActionType {
  FEEDING
  TREATMENT
  FRAME
  HARVEST
  BOX_CONFIGURATION
  NOTE
  OTHER
}

enum HarvestStatus {
  DRAFT       // Initial state - selecting hives/frames
  IN_PROGRESS // Extraction ongoing - can set weight
  COMPLETED   // Finalized - actions created, read-only
}

// Weather condition simplified categories
enum WeatherCondition {
  CLEAR
  PARTLY_CLOUDY
  OVERCAST
  FOG
  DRIZZLE
  RAIN
  SNOW
}

// Historical weather data for apiaries (stored hourly)
model Weather {
  id          String            @id @default(uuid())
  apiaryId    String
  apiary      Apiary            @relation(fields: [apiaryId], references: [id], onDelete: Cascade)
  timestamp   DateTime          // When the weather data is for (hourly)
  fetchedAt   DateTime          @default(now()) // When we fetched this data
  condition   WeatherCondition
  temperature Float             // in Celsius
  feelsLike   Float             // in Celsius
  humidity    Int               // percentage
  windSpeed   Float             // in km/h
  
  @@unique([apiaryId, timestamp]) // Prevent duplicate entries for same apiary and time
  @@index([apiaryId])
  @@index([timestamp])
  @@index([apiaryId, timestamp])
}

// Hourly weather forecast for the next 5 hours
model WeatherHourlyForecast {
  id          String            @id @default(uuid())
  apiaryId    String
  apiary      Apiary            @relation(fields: [apiaryId], references: [id], onDelete: Cascade)
  timestamp   DateTime          // The hour this forecast is for
  fetchedAt   DateTime          @default(now()) // When we fetched this data
  condition   WeatherCondition
  temperature Float             // in Celsius
  feelsLike   Float             // in Celsius
  humidity    Int               // percentage
  windSpeed   Float             // in km/h
  
  @@unique([apiaryId, timestamp]) // Prevent duplicate entries for same apiary and time
  @@index([apiaryId])
  @@index([timestamp])
  @@index([apiaryId, timestamp])
}

// Daily weather forecast for the next 5 days
model WeatherForecast {
  id             String            @id @default(uuid())
  apiaryId       String
  apiary         Apiary            @relation(fields: [apiaryId], references: [id], onDelete: Cascade)
  date           DateTime          // The date this forecast is for
  fetchedAt      DateTime          @default(now()) // When we fetched this data
  condition      WeatherCondition
  temperatureMin Float             // in Celsius
  temperatureMax Float             // in Celsius
  humidity       Int               // percentage
  windSpeed      Float             // in km/h
  
  @@unique([apiaryId, date]) // Prevent duplicate entries for same apiary and date
  @@index([apiaryId])
  @@index([date])
  @@index([apiaryId, date])
}

// Alert system for hive management notifications
model Alert {
  id        String        @id @default(uuid())
  hiveId    String?       // Optional - alerts can be hive-specific or general
  hive      Hive?         @relation(fields: [hiveId], references: [id], onDelete: Cascade)
  type      String        // e.g., "inspection_overdue", "feeding_required", etc.
  message   String        // Human-readable alert message
  severity  AlertSeverity // LOW, MEDIUM, HIGH
  status    AlertStatus   @default(ACTIVE) // ACTIVE, DISMISSED, RESOLVED, SUPERSEDED
  metadata  Json?         // Additional checker-specific data
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([hiveId])
  @@index([type])
  @@index([status])
  @@index([severity])
  @@index([hiveId, type, status]) // Composite index for efficient alert queries
  @@index([createdAt])
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
}

enum AlertStatus {
  ACTIVE      // Alert is currently relevant
  DISMISSED   // User has dismissed the alert
  RESOLVED    // Issue has been resolved
  SUPERSEDED  // Alert replaced by newer alert with different priority
}

// Equipment item configuration for each user
model EquipmentItem {
  id                String              @id @default(uuid())
  userId            String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId            String              // e.g., "DEEP_BOX", "SHALLOW_BOX", "FRAMES", "SUGAR", custom IDs
  name              String?             // Display name (optional for custom items)
  enabled           Boolean             @default(true)
  perHive           Float               @default(0) // Amount per hive (for standard calculations)
  extra             Float               @default(0) // Extra inventory on hand
  neededOverride    Float?              // Manual override for needed amount (null = use calculation)
  category          EquipmentCategory
  unit              String              @default("pieces") // "pieces", "kg", "liters", etc.
  isCustom          Boolean             @default(false) // Whether this is a custom item
  displayOrder      Int                 @default(999)
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@unique([userId, itemId])
  @@index([userId])
  @@index([userId, category])
}

// Planning multiplier for equipment calculations
model EquipmentMultiplier {
  id                String              @id @default(uuid())
  userId            String              @unique
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  targetMultiplier  Float               @default(1.5) // Target hives = current * multiplier
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

enum EquipmentCategory {
  BOXES           // Deep boxes, shallow boxes
  HIVE_PARTS      // Bottoms, covers, excluders
  FRAMES          // All frame types
  FEEDING         // Feeders, sugar, syrup
  CONSUMABLES     // Treatment, foundation, etc.
  TOOLS           // Hive tools, smokers, etc.
  PROTECTIVE      // Suits, gloves, veils
  EXTRACTION      // Extractors, uncapping tools
  CUSTOM          // User-defined categories
}
