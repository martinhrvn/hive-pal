openapi: 3.0.0
paths:
  /api:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - App
  /api/auth/register:
    post:
      operationId: AuthController_register
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDto'
        '400':
          description: Bad request
        '409':
          description: Email already in use
      summary: Register a new user
      tags: &ref_0
        - auth
  /api/auth/login:
    post:
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: User successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDto'
        '401':
          description: Unauthorized
      summary: Login with email and password
      tags: *ref_0
  /api/auth/me:
    get:
      operationId: AuthController_getProfile
      parameters: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '401':
          description: Unauthorized
      security:
        - bearer: []
      summary: Get current user profile
      tags: *ref_0
  /api/users:
    get:
      operationId: UsersController_findAll
      parameters: []
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDto'
      security:
        - bearer: []
      summary: Get all users (admin only)
      tags: &ref_1
        - users
  /api/users/{id}/reset-password:
    post:
      operationId: UsersController_resetPassword
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordDto'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
      security:
        - bearer: []
      summary: Reset a user's password (admin only)
      tags: *ref_1
  /api/users/change-password:
    post:
      operationId: UsersController_changePassword
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordDto'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
      security:
        - bearer: []
      summary: Change own password
      tags: *ref_1
  /api/hives:
    post:
      operationId: HiveController_create
      parameters: []
      responses:
        '201':
          description: ''
      tags: &ref_2
        - hives
    get:
      operationId: HiveController_findAll
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_2
  /api/hives/{id}:
    get:
      operationId: HiveController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_2
    patch:
      operationId: HiveController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_2
    delete:
      operationId: HiveController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_2
  /api/hives/{id}/boxes:
    put:
      operationId: HiveController_updateBoxes
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_2
  /api/inspections:
    post:
      operationId: InspectionsController_create
      parameters: []
      responses:
        '201':
          description: ''
      tags: &ref_3
        - Inspections
    get:
      operationId: InspectionsController_findAll
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_3
  /api/inspections/{id}:
    get:
      operationId: InspectionsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_3
    patch:
      operationId: InspectionsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_3
    delete:
      operationId: InspectionsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_3
  /api/queens:
    post:
      operationId: QueensController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQueenDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueenResponseDto'
      tags: &ref_4
        - queens
    get:
      operationId: QueensController_findAll
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QueenResponseDto'
      tags: *ref_4
  /api/queens/{id}:
    get:
      operationId: QueensController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueenResponseDto'
      tags: *ref_4
    patch:
      operationId: QueensController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateQueenDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueenResponseDto'
      tags: *ref_4
    delete:
      operationId: QueensController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueenResponseDto'
      tags: *ref_4
  /api/apiaries:
    post:
      operationId: ApiariesController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiaryDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiaryResponseDto'
      tags: &ref_5
        - Apiaries
    get:
      operationId: ApiariesController_findAll
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiaryResponseDto'
      tags: *ref_5
  /api/apiaries/{id}:
    get:
      operationId: ApiariesController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiaryResponseDto'
      tags: *ref_5
    patch:
      operationId: ApiariesController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiaryDto'
      responses:
        '200':
          description: ''
      tags: *ref_5
    delete:
      operationId: ApiariesController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_5
  /api/health:
    get:
      operationId: HealthController_check
      parameters: []
      responses:
        '200':
          description: The Health Check is successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  info:
                    type: object
                    example: &ref_6
                      database: &ref_7
                        status: up
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
                    nullable: true
                  error:
                    type: object
                    example: {}
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
                    nullable: true
                  details:
                    type: object
                    example: *ref_6
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
        '503':
          description: The Health Check is not successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  info:
                    type: object
                    example: *ref_6
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
                    nullable: true
                  error:
                    type: object
                    example:
                      redis: &ref_8
                        status: down
                        message: Could not connect
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
                    nullable: true
                  details:
                    type: object
                    example:
                      database: *ref_7
                      redis: *ref_8
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
      summary: Check the health of the app
      tags:
        - health
info:
  title: API Example
  description: The API description
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  schemas:
    RegisterDto:
      type: object
      properties:
        email:
          type: string
          description: User email address
          example: user@example.com
        password:
          type: string
          description: User password
          example: password123
          minLength: 6
        name:
          type: string
          description: User display name (optional)
          example: John Doe
      required:
        - email
        - password
    UserDto:
      type: object
      properties:
        id:
          type: string
          description: User ID
          example: '1'
        email:
          type: string
          description: User email
          example: user@example.com
        name:
          type: string
          description: User display name
          example: John Doe
        role:
          type: string
          description: User role
          example: USER
          enum:
            - USER
            - ADMIN
        passwordChangeRequired:
          type: boolean
          description: Whether the user needs to change their password
          example: false
      required:
        - id
        - email
        - role
        - passwordChangeRequired
    AuthResponseDto:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        user:
          description: User information
          allOf:
            - $ref: '#/components/schemas/UserDto'
      required:
        - access_token
        - user
    LoginDto:
      type: object
      properties:
        email:
          type: string
          description: User email address used for login
          example: user@example.com
        password:
          type: string
          description: User password
          example: password123
          minLength: 6
      required:
        - email
        - password
    UserResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          description: Email address of the user
          example: user@example.com
        name:
          type: string
          description: Name of the user
          example: John Doe
          nullable: true
        role:
          type: string
          description: Role of the user
          enum:
            - USER
            - ADMIN
          example: USER
        passwordChangeRequired:
          type: boolean
          description: Whether the user needs to change their password
          example: false
        createdAt:
          format: date-time
          type: string
          description: User creation date
          example: '2023-01-01T00:00:00.000Z'
        updatedAt:
          format: date-time
          type: string
          description: Last update date
          example: '2023-01-01T00:00:00.000Z'
      required:
        - id
        - email
        - role
        - passwordChangeRequired
        - createdAt
        - updatedAt
    ResetPasswordDto:
      type: object
      properties:
        tempPassword:
          type: string
          description: Temporary password to be set for the user
          example: Temp123!
      required:
        - tempPassword
    ChangePasswordDto:
      type: object
      properties:
        currentPassword:
          type: string
          description: Current password of the user
          example: CurrentPass123!
        newPassword:
          type: string
          description: New password to be set for the user
          example: NewPass123!
      required:
        - currentPassword
        - newPassword
    QueenStatus:
      type: string
      enum:
        - ACTIVE
        - REPLACED
        - DEAD
        - UNKNOWN
      description: Current status of the queen
    CreateQueenDto:
      type: object
      properties:
        hiveId:
          type: string
          format: uuid
          description: ID of the hive this queen belongs to
          example: 123e4567-e89b-12d3-a456-426614174000
        marking:
          type: string
          nullable: true
          description: Optional marking, usually number or similar
          example: Yellow dot
        color:
          type: string
          nullable: true
          description: Optional color of the queen
          example: Yellow
        year:
          type: number
          description: Birth year of the queen
          example: 2025
        source:
          type: string
          nullable: true
          description: Source of the queen (breeder, etc.)
          example: Local breeder
        status:
          nullable: true
          description: Current status of the queen
          example: ACTIVE
          allOf:
            - $ref: '#/components/schemas/QueenStatus'
        installedAt:
          type: string
          format: date-time
          nullable: true
          description: Date when the queen was installed
          example: '2025-03-20T10:00:00Z'
        replacedAt:
          type: string
          format: date-time
          nullable: true
          description: Date when the queen was replaced
          example: '2025-04-15T10:00:00Z'
      required:
        - year
    QueenResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the queen
        hiveId:
          type: string
          nullable: true
          description: ID of the hive this queen belongs to
        marking:
          type: string
          nullable: true
          description: Queen marking code
        color:
          type: string
          nullable: true
          description: Queen color marking
        year:
          type: number
          description: Birth year of the queen
        source:
          type: string
        status:
          type: string
          enum:
            - ACTIVE
            - REPLACED
            - DEAD
            - UNKNOWN
        installedAt:
          type: string
        replacedAt:
          type: string
      required:
        - id
        - marking
        - color
        - year
    UpdateQueenDto:
      type: object
      properties:
        hiveId:
          type: string
          format: uuid
          description: ID of the hive this queen belongs to
          example: 123e4567-e89b-12d3-a456-426614174000
        marking:
          type: string
          nullable: true
          description: Optional marking, usually number or similar
          example: Yellow dot
        color:
          type: string
          nullable: true
          description: Optional color of the queen
          example: Yellow
        year:
          type: number
          description: Birth year of the queen
          example: 2025
        source:
          type: string
          nullable: true
          description: Source of the queen (breeder, etc.)
          example: Local breeder
        status:
          nullable: true
          description: Current status of the queen
          example: ACTIVE
          allOf:
            - $ref: '#/components/schemas/QueenStatus'
        installedAt:
          type: string
          format: date-time
          nullable: true
          description: Date when the queen was installed
          example: '2025-03-20T10:00:00Z'
        replacedAt:
          type: string
          format: date-time
          nullable: true
          description: Date when the queen was replaced
          example: '2025-04-15T10:00:00Z'
    CreateApiaryDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the apiary
          example: Meadow Apiary
        location:
          type: string
          description: Location description of the apiary
          example: Behind the barn
        latitude:
          type: number
          description: Latitude coordinate of the apiary
          example: 40.7128
        longitude:
          type: number
          description: Longitude coordinate of the apiary
          example: -74.006
      required:
        - name
    ApiaryResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the apiary
        name:
          type: string
          description: Name of the apiary
        location:
          type: string
          description: Location of the apiary
          nullable: true
        latitude:
          type: number
          description: Latitude of the apiary
          nullable: true
        longitude:
          type: number
          description: Longitude of the apiary
          nullable: true
      required:
        - id
        - name
    UpdateApiaryDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the apiary
          example: Meadow Apiary
        location:
          type: string
          description: Location description of the apiary
          example: Behind the barn
        latitude:
          type: number
          description: Latitude coordinate of the apiary
          example: 40.7128
        longitude:
          type: number
          description: Longitude coordinate of the apiary
          example: -74.006
    FeedingActionDetailsDto:
      type: object
      properties:
        feedType:
          type: string
          description: Type of feed (Sugar Syrup, Honey, Pollen Sub, Candy)
        amount:
          type: number
          description: Amount of feed
        unit:
          type: string
          description: Unit of measurement (liters, quarts, gallons, kg, lb)
        concentration:
          type: string
          description: Concentration of feed (1:1, 2:1, etc.)
        type:
          type: string
          enum:
            - FEEDING
          description: Type of action
      required:
        - feedType
        - amount
        - unit
        - type
    TreatmentActionDetailsDto:
      type: object
      properties:
        product:
          type: string
          description: Treatment product name
        quantity:
          type: number
          description: Treatment quantity
        unit:
          type: string
          description: Unit of measurement
        duration:
          type: string
          description: Treatment duration
        type:
          type: string
          enum:
            - TREATMENT
          description: Type of action
      required:
        - product
        - quantity
        - unit
        - type
    FrameActionDetailsDto:
      type: object
      properties:
        quantity:
          type: number
          description: Quantity of frames
        type:
          type: string
          enum:
            - FRAME
      required:
        - quantity
